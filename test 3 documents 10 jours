import os
import datetime
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO

def should_run(log_file):
    if not os.path.exists(log_file):
        return True
    with open(log_file, "r") as f:
        last_run = datetime.datetime.strptime(f.read(), "%Y-%m-%d")
    return (datetime.datetime.today() - last_run).days >= 10

def update_log(log_file):
    with open(log_file, "w") as f:
        f.write(datetime.datetime.today().strftime("%Y-%m-%d"))

def run_health_analysis(site_name, fft_file, hilbert_file, fft_sheet, hilbert_sheet, motor_col, output_file, log_file):
    if not should_run(log_file):
        print(f" {site_name} : moins de 10 jours écoulés. Analyse non lancée.")
        return

    print(f" Lancement de l’analyse pour {site_name}...")

    # Lecture des fichiers Excel
    fft_df = pd.read_excel(fft_file, sheet_name=fft_sheet)
    hilbert_df = pd.read_excel(hilbert_file, sheet_name=hilbert_sheet)

    fft_df[motor_col] = fft_df[motor_col].fillna(method="ffill")
    hilbert_df[motor_col] = hilbert_df[motor_col].fillna(method="ffill")

    # Phase A uniquement
    fft_A = fft_df[fft_df["Phase"] == "A"][[motor_col, "Mean FFT Magnitude"]].rename(columns={"Mean FFT Magnitude": "FFT_Mag"})
    hilbert_A = hilbert_df[hilbert_df["Phase"] == "A"][[motor_col, "Standard deviation frequency"]].rename(columns={"Standard deviation frequency": "Hilbert_STD"})

    df = pd.merge(fft_A, hilbert_A, on=motor_col)

    # Normalisation et score
    df["FFT_Mag_Norm"] = (df["FFT_Mag"] - df["FFT_Mag"].min()) / (df["FFT_Mag"].max() - df["FFT_Mag"].min())
    df["Hilbert_STD_Norm"] = (df["Hilbert_STD"] - df["Hilbert_STD"].min()) / (df["Hilbert_STD"].max() - df["Hilbert_STD"].min())
    df["Health Score"] = 1 - (0.5 * df["FFT_Mag_Norm"] + 0.5 * df["Hilbert_STD_Norm"])

    df["État moteur"] = df["Health Score"].apply(lambda s: "Bon" if s > 0.7 else "Moyen" if s > 0.4 else "Critique")

    # Graphique
    plt.figure(figsize=(12, 6))
    plt.bar(df[motor_col], df["Health Score"], color=df["État moteur"].map({"Bon": "green", "Moyen": "orange", "Critique": "red"}))
    plt.axhline(0.7, color="gray", linestyle="--", label="Seuil Bon (0.7)")
    plt.axhline(0.4, color="gray", linestyle="--", label="Seuil Moyen (0.4)")
    plt.xticks(rotation=90)
    plt.ylabel("Health Score")
    plt.title(f"Niveau de vie des moteurs - {site_name}")
    plt.legend()
    plt.tight_layout()

    # Image buffer
    img = BytesIO()
    plt.savefig(img, format='png')
    plt.close()

    # Export Excel
    with pd.ExcelWriter(output_file, engine="xlsxwriter") as writer:
        df.to_excel(writer, sheet_name="Résumé santé", index=False)
        ws = writer.book.add_worksheet("Graphique")
        ws.insert_image("B2", "graph.png", {"image_data": img})

    update_log(log_file)
    print(f" Rapport généré pour {site_name} : {output_file}")

# === Exécution pour les 3 sites === #

run_health_analysis(
    site_name="PPTSB",
    fft_file="PPTSB_Motors_FFT_Health_Results.xlsx",
    hilbert_file="PPTSB_Motors_with_health_results.xlsx",
    fft_sheet="Global Results",
    hilbert_sheet="Global results",
    motor_col="Moteur",
    output_file="PPTSB_Motor_Health_Report.xlsx",
    log_file="last_run_pptsb.log"
)

run_health_analysis(
    site_name="MTBE",
    fft_file="MTBE_Motors_with_fft_health_results.xlsx",
    hilbert_file="MTBE_Motors_with_health_results.xlsx",
    fft_sheet="Global results",
    hilbert_sheet=" Global results",  # attention à l’espace !
    motor_col="Motor",
    output_file="MTBE_Motor_Health_Report.xlsx",
    log_file="last_run_mtbe.log"
)

run_health_analysis(
    site_name="PDH",
    fft_file="PDH_Motors_with_fft_health_results.xlsx",
    hilbert_file="PDH_Motors_with_health_results.xlsx",
    fft_sheet="Global results",
    hilbert_sheet=" Global results",
    motor_col="Moteur",
    output_file="PDH_Motor_Health_Report.xlsx",
    log_file="last_run_pdh.log"
)
